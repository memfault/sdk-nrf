.. _etb_trace:

ETB trace
#########

.. contents::
   :local:
   :depth: 2

The experimental Embedded Trace Buffer (ETB) library enables tracing of executed instructions and storing them in a dedicated RAM buffer.
Traces are generated by the core's Embedded Trace Macrocell (ETM) unit and are captured without CPU intervention.
Currently, the nRF91 series SoCs are supported.

The ETB RAM buffer behaves as a circular buffer of 2 KB, where new traces overwrites older traces in case it is filled up.
Captured traces can be read out by the application using the library's APIs.
You can refer to `ARM Coresight`_ documentation for more information about the various Coresight components, trace format and trace processing.

Configuration
*************

To enable the library, use :kconfig:option:`CONFIG_ETB_TRACE`.
By default, the library automatically starts tracing at the earliest stage possible in the Zephyr boot sequence to be able to capture instructions as early as possible.
You can choose to start tracing in the application by disabling :kconfig:option:`CONFIG_ETB_TRACE_SYS_INIT`.

Capturing ETM-generated traces and storing them to ETB requires the SoC's trace and debug system to be enabled.
This increases the power consumption significantly.
To counteract this, the library provides the option (:kconfig:option:`CONFIG_ETB_TRACE_PM`) to reduce the power consumption by disabling the debug system when the CPU goes to idle.
This is a feature that requires code to be executed both on enter and exit of CPU idle, and will thus introduce latency to the system.
It may also have other, unknown side effects to the system.

The ETB trace library is used in the :ref:`memfault_sample` sample, where it is shown how to read out the ETB buffer and store the data in a coredump in case of a system crash.


Usage
*****

To initialize and start tracing, call :c:func:`etb_trace_start`.
This will configure the ETM, set up the ATB funnels and replicator and enable the ETB.
Traces are now written continuously to the ETB RAM.

To stop trace capture, use the :c:func:`etb_trace_stop` API.

The captured traces can now be read out using :c:func:`etb_data_get`.
The maximum size of data the ETB buffer can hold is 2 KB.


API documentation
*****************

| Header file: :file:`include/debug/etb_trace.h`
| Source files: :file:`subsys/debug/etb_trace/`

.. doxygengroup:: etb_trace
   :project: nrf
   :members:
